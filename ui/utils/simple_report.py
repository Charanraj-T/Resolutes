"""
Simplified PDF Generator with fallback text output for testing
"""
import json
import io

def simple_pdf_fallback(analysis_data, startup_name):
    """
    Creates a simple text-based report when reportlab is not available
    """
    buffer = io.StringIO()
    
    # Parse JSON if it's a string
    if isinstance(analysis_data, str):
        try:
            analysis_data = json.loads(analysis_data)
        except json.JSONDecodeError:
            buffer.write("Error: Unable to parse analysis data\n")
            buffer.write(f"Raw data: {analysis_data}")
            return buffer
    
    # Generate text report
    buffer.write(f"INVESTMENT ANALYSIS REPORT\n")
    buffer.write(f"{'=' * 50}\n")
    buffer.write(f"Company: {startup_name}\n")
    buffer.write(f"Generated: {analysis_data.get('analysis_metadata', {}).get('analysis_date', 'Unknown')}\n\n")
    
    # Investment Summary
    inv_summary = analysis_data.get('investment_summary', {})
    if inv_summary:
        buffer.write("INVESTMENT SUMMARY\n")
        buffer.write("-" * 20 + "\n")
        buffer.write(f"Overall Score: {inv_summary.get('overall_score', 'N/A')}/10\n")
        buffer.write(f"Recommendation: {inv_summary.get('investment_recommendation', 'N/A')}\n")
        buffer.write(f"Thesis: {inv_summary.get('investment_thesis', 'N/A')}\n\n")
        
        # Key strengths
        strengths = inv_summary.get('key_strengths', [])
        if strengths:
            buffer.write("Key Strengths:\n")
            for strength in strengths:
                if strength and strength != "string":
                    buffer.write(f"• {strength}\n")
            buffer.write("\n")
        
        # Key risks
        risks = inv_summary.get('key_risks', [])
        if risks:
            buffer.write("Key Risks:\n")
            for risk in risks:
                if risk and risk != "string":
                    buffer.write(f"• {risk}\n")
            buffer.write("\n")
    
    # Team Analysis
    team_data = analysis_data.get('team_analysis', {})
    if team_data:
        buffer.write("TEAM ANALYSIS\n")
        buffer.write("-" * 15 + "\n")
        
        assessment = team_data.get('team_assessment', {})
        if assessment:
            buffer.write(f"Founder-Market Fit: {assessment.get('founder_market_fit', 'N/A')}\n")
            buffer.write(f"Execution Capability: {assessment.get('execution_capability', 'N/A')}\n")
            buffer.write(f"Technical Competency: {assessment.get('technical_competency', 'N/A')}\n\n")
    
    # Market Analysis
    market_data = analysis_data.get('market_analysis', {})
    if market_data:
        buffer.write("MARKET ANALYSIS\n")
        buffer.write("-" * 16 + "\n")
        
        market_size = market_data.get('market_size', {})
        if market_size:
            buffer.write(f"TAM: {market_size.get('total_addressable_market', 'N/A')}\n")
            buffer.write(f"Growth Rate: {market_size.get('market_growth_rate', 'N/A')}\n")
            buffer.write(f"Maturity: {market_size.get('market_maturity', 'N/A')}\n\n")
    
    # Financial Analysis
    financial_data = analysis_data.get('financial_analysis', {})
    if financial_data:
        buffer.write("FINANCIAL ANALYSIS\n")
        buffer.write("-" * 19 + "\n")
        
        funding = financial_data.get('funding_history', {})
        if funding:
            buffer.write(f"Total Funding: {funding.get('total_funding_raised', 'N/A')}\n")
            buffer.write(f"Latest Valuation: {funding.get('latest_valuation', 'N/A')}\n")
            buffer.write(f"Trajectory: {funding.get('funding_trajectory', 'N/A')}\n\n")
    
    buffer.write("Report generated by Resolutes ADK Analysis System\n")
    
    text_content = buffer.getvalue()
    buffer.close()
    
    # Return as bytes buffer for consistency with PDF interface
    bytes_buffer = io.BytesIO(text_content.encode('utf-8'))
    return bytes_buffer

# Test function
if __name__ == "__main__":
    test_data = {
        "analysis_metadata": {"company_name": "Test Corp", "analysis_date": "2025-09-21"},
        "investment_summary": {
            "overall_score": 8.5,
            "investment_recommendation": "Strong Buy",
            "investment_thesis": "Excellent opportunity with strong fundamentals",
            "key_strengths": ["Great team", "Large market", "Strong traction"],
            "key_risks": ["Competition", "Market timing"]
        }
    }
    
    result = simple_pdf_fallback(test_data, "Test Corp")
    print("Text Report Generated:")
    print("=" * 30)
    print(result.getvalue().decode('utf-8'))